button:hover {
    animation: scale 0.1s ease-in-out both;
}

button:hover span {
    animation: scale 0.1s ease-in-out both;
    animation-delay: 0.06s;
}

@keyframes scale {
    0% {
        transform: scale(1);
    }

    100% {
        transform: scale(1.1);
    }
}

  .ccs{

		background: #f8f4e5;
		padding: 50px 100px;
		border: 2px solid black;
		box-shadow: 15px 15px 1px #ffa580, 15px 15px 1px 2px black;

  }

  .button{
	width: 100px;
	height: 75px;
	margin-top: .700em;
  }

  input[type="radio"] {
	appearance: none;
	-webkit-appearance: none;
	width: 20px;
	height: 20px;
	border: 1px solid #fff;
	border-radius: 50%;
	margin-right: 10px;
	background-color: transparent;
	position: relative;
	top: 6px;
}

input[type="radio"]:checked::before {
	content: "";
	display: block;
	width: 12px;
	height: 12px;
	background-color: #ca8489;
	border-radius: 50%;
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	animation: appear 0.8s;
}

label {
	font-size: 16px;
	font-weight: bold;
	color: #000000;
	margin-top: .6em;
}

.form-check{
	margin-left: 1em;
}


@keyframes appear {
	0% {
		transform: translate(-50%, -50%) scale(0);
		background-color: #fff;
	}
	45% {
		transform: translate(-50%, -50%) scale(1.6);
		background-color: #64aedf;
	}
	50% {
		transform: translate(-50%, -50%) scale(1.7);
		background-color: #ad97b3;
	}
	55% {
		transform: translate(-50%, -50%) scale(1.6);
	}
	100% {
		transform: translate(-50%, -50%) scale(1);
		background-color: #ca8489;
	}
}



  #countdown {
    position: relative;
    margin: auto;
    width: 100px; /* Genişlik 100px olarak ayarlandı */
    height: 100px; /* Yükseklik 100px olarak ayarlandı */
    text-align: center;
  }
  
  #countdown-number {
    display: inline-block;
    line-height: 100px; /* Yükseklikle uyumlu hizalama */
  }
  
  svg {
    position: absolute;
    top: 0;
    right: 0;
    width: 100px; /* Genişlik 100px olarak ayarlandı */
    height: 100px; /* Yükseklik 100px olarak ayarlandı */
    transform: rotateY(-180deg) rotateZ(-90deg);
  }
  
  svg circle {
    stroke-dasharray: 251px; /* Yarıçap * 2 * pi */
    stroke-dashoffset: 0px;
    stroke-linecap: round;
    stroke-width: 10px; /* Daha belirgin görünüm için kalınlığı artırın */
    stroke: purple;
    fill: none;
    animation: countdown 4800s linear infinite forwards;
  }
  

  
  @keyframes countdown {
    from {
      stroke-dashoffset: 0px;
    }
    to {
      stroke-dashoffset: 113px;
    }
  }





  button {
	display: block;
	margin: 0 auto;
	line-height: 28pt;
	padding: 0 20px;
	background: #ffa580;
	letter-spacing: 2px;
	transition: 0.2s all ease-in-out;
	outline: none;
	border: 1px solid black;
	box-shadow: 3px 3px 1px 1px #95a4ff, 3px 3px 1px 2px black;
  }
  button:hover {
	background: black;
	color: white;
	border: 1px solid black;
  }






  @media screen and (max-width:768px) {
	button{
		width: 75px;
		height: 50px;
		font-size: 8px;

	}
  }

$d: 20em;
$t: 20;
$c: #8a9b0f #940a3d;

@property --t {
	syntax: '<number>';
	initial-value: #{$t};
	inherits: true
}

/* won't be needed once Chrome supports round() */
@property --s {
	syntax: '<integer>';
	initial-value: 0;
	inherits: true
}

.countdown {
	/* when Chrome supports round(), this can be simplified */
	/* more on this rounding trick
	 * https://css-tricks.com/using-absolute-value-sign-rounding-and-modulo-in-css-today/ */
	--s: calc(var(--t)/1);
	display: grid;
	margin: 1em auto;
	width: $d; height: $d;
	animation: t $t*1s linear infinite;
	
	&::after {
		grid-column: 1;
		grid-row: 1;
		place-self: center;
		font: #{.25*$d}/ 2 ubuntu mono, consolas, monaco, monospace;
		counter-reset: s var(--s);
		content: '0:' counter(s, decimal-leading-zero)
	}
}

@keyframes t { to { --t: 0 } }

svg {
	grid-column: 1;
	grid-row: 1
}

[r] {
	fill: none;
	stroke: silver;
	
	+ [r] {
		--k: calc(var(--t)/#{$t});
		transform: rotate(-90deg);
		stroke-linecap: round;
		stroke: color-mix(in hsl shorter hue, #{nth($c, 1)} calc(var(--k)*100%), #{nth($c, 2)});
		stroke-dasharray: var(--k) 1
	}
}




